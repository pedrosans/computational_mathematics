;new comment stuff http://en.wikipedia.org/wiki/Gauss%E2%80%93Seidel_method
(load "C:/java/git-repo/computational_mathematics/util.lisp")
(load "C:/java/git-repo/computational_mathematics/math_util.lisp")
;(load "C:/dev/git-repos/computational_mathematics/util.lisp")
;(load "C:/dev/git-repos/computational_mathematics/math_util.lisp")
(defun constant(equation variables)
	(eval (replace_elements equation variables 0))
)
(defun multiplier (equation variable variables)
	(setq C (constant equation variables))
	(setq aux (replace_elements equation (set-difference variables (list variable)) 0))
	(setq aux (replace_elements aux (list variable) 1))
	(-(eval aux) C)
)
(defun lower-diagonal (matrix)
	(setq result (list))
	(dotimes (i (list-length matrix))
		(setq line (list))
		(dotimes (j (list-length (nth i matrix)))
			(setq line (append line (list(if (> j i ) 0 (nth j (nth i matrix)) ))))
		)
		(setq result (append result (list line)))
	)
	result
)
(defun higher-diagonal (matrix)
	(setq result (list))
	(dotimes (i (list-length matrix))
		(setq line (list))
		(dotimes (j (list-length (nth i matrix)))
			(setq line (append line (list(if (<= j i ) 0 (nth j (nth i matrix)) ))))
		)
		(setq result (append result (list line)))
	)
	result
)
(defun operate_matrix(m1 m2 f)
	(setq result (list))
	(dotimes (i (list-length m1))
		(setq line (list))
		(dotimes (j (list-length (nth i m1)))
			(setq line (append line (list 
				(funcall f (nth j (nth i m1))(if (< j (list-length(nth i m2))) (nth j (nth i m2)) 0 ))
			)))
		)
		(setq result (append result (list line)))
	)
	result
)
(defun matrix_A ( equations variables)
	(setq A (list))
	(mapcar (lambda(equation)
		(setq C (constant equation variables))
		(setq A_line (list))
		(mapcar (lambda (variable) 
			(setq A_line (append A_line (list (multiplier equation variable variables)))) 
		) variables)
		(setq A (append A (list A_line)))
	) equations)
	A
)
(defun matrix_B( equations variables)
	(setq B (list))
	(mapcar (lambda(equation)
		(setq B (append B (list(list (* -1(constant equation variables))))))
	) equations)
	B
)
(defun matrix_X(variables)
	(setq X (list))
	(mapcar (lambda (var)(setq X (append X (list (list (SYMBOL-VALUE var)))))) variables)
	X
)
(defun gauss_seidel(equations variables precision iteration )
	(if (= iteration 0 )
		(matrix_X variables)
		(progn
			;Ax = b
			(setq b (matrix_B equations variables))
			(setq A (matrix_A equations variables))
			(setq X (matrix_X variables))
			;A = L + U
			(setq L (lower-diagonal A))
			(setq U (higher-diagonal A))
			;Lx = b - Ux
			(setq array_L (to_array L))
			(invert-matrix array_L )
			(setq L_invertido (to_list array_L)) 
			(setq Ux (matrix-multiply U X))
			(setq Xk (matrix-multiply L_invertido (operate_matrix b Ux #'-)))
			(setq delta (list))
			(dotimes (i (list-length Xk))
				(setq delta (append delta (list (- (car (nth i Xk)) (car (nth i X)) ) )))
				(setf (SYMBOL-VALUE (nth i variables)) (car (nth i Xk)))
			)
			(format t "~%-->interacao: ~d" iteration)
			;(print_matrix X)
			;(print_matrix Xk)
			;(print_list delta)
			(if (> precision (find_max delta))
				(progn (print "precisao encontrada") Xk)
				(progn
					(gauss_seidel equations variables precision (- iteration 1))
				)
			)
		)
	)
)
(setq f1 '(+ (/ (+ (* 2 x1) (* -1 (expt x1 2)) 8) 9 )  (/ (+ (* 4 x2)(* -1 (expt x2 2))) 4 )  ))
(setq f2 '(+ (* 8 x1) (* -4 (expt x1 2)) (expt x2 2) 1 ))
(setq f3 '(+ (* 2 x2) (* 3 x2) (* 6 x3) -31))
(setq x1 0)(setq x2 0)(setq x3 0)(setq x4 0)(setq x5 0)
(setq solution(gauss_seidel (list f1 f2 f3 ) '(x1 x2 x3  ) 1/100000 30))
(print "solucao:")
(print_matrix solution)
